coheleased memory access using float4
https://devblogs.nvidia.com/parallelforall/thinking-parallel-part-iii-tree-construction-gpu/
Correct Aliasing issues
use cuda streams
add support for FPS display
profile with nvidia profiler
Make sure no printing inside critical loops
Experiment with different data types
Cleanup code and commented stuff
Organize Gpu Code
Add Gpu Box


Prep up the CPU Code



GUI Design
=>optimize packing data for efficient retrival on GPU
=>Cuda controls(Ray depth,Samples,block size)
Interactive Samples,Interactive Depth
=>Display stuff like kernel execution time,texture mapping
=>BackFace Culling
=>Air refractive index,glass ka refractive index
=>Escape to close




Stuff We did
(Presentation Slides)
A slideShow Showing the project evolving
=>Basic Ray Tracer=>Load Objects=>Depth Check=>


Overview of Collision Algorithms
// http://www.scratchapixel.com/lessons/3d-basic-rendering/minimal-ray-tracer-rendering-simple-shapes/ray-box-intersection
// optimised code from http://www.gamedev.net/topic/495636-raybox-collision-intersection-point

Final Submission
//clean and build and get rid of all warnings
Report additions

=>Initial Depth Depth testing with Cornell Box
=>bilateral rendering for cpu vs gpu
=>Basic GPU implementation(=>)
=>Speedup curves
=>timing data for kernels and total gpu time and cpu comparisions
=>Speedup should be shown with 2-3 methods and graphs to accompany
=>Basic Loop Addition
=>Write about GUI controls
=>Optimizations avoid branching by using arr of function ptrs
=>Optimization with BVH (minimal thread divergence and other stuff from blob)







[DONE]tried texture memory
[DONE]setup cuda and opengl interop
[DONE]Basic RayTracing and Camera Setup
[DONE]Backface Culling Using muller trumbore algorithm
[DONE]Loading Objects Support
[DONE]use thrust for various datastructures
[DONE]add cuda timer events
[DONE]add support for data structures(BVH)
[DONE]Controls (movement,reset,mouse)
[DONE]recursion overhead avoided with loops